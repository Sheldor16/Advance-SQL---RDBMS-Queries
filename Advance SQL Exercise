Workers With The Highest Salary

Quest: Find the titles of workers that earn the highest salary. Output the highest-paid title or multiple titles that share the highest salary.

SQL Query : 

with highest_salary AS 
(
SELECT 
t.worker_title,w.salary, RANK() OVER (ORDER BY w.salary DESC) AS rnk
from worker w
join title t
on w.worker_id = t.worker_ref_id
)

SELECT worker_title AS best_paid_title
FROM highest_salary
where rnk = 1

Salaries Difference
Quest: Write a query that calculates the difference between the highest salaries found in the marketing and engineering departments. Output just the absolute difference in salaries.

SQL Query: 

select abs(m.salary - e.salary) as absolute_difference from
(select max(salary) as salary from db_employee
join db_dept on db_employee.department_id = db_dept.id
where department like '%marketing%') as m,
(select max(salary) as salary from db_employee
join db_dept on db_employee.department_id = db_dept.id
where department like '%engineering%') as e

Highest Cost Orders

Quest: Find the customer with the highest daily total order cost between 2019-02-01 to 2019-05-01. 
If customer had more than one order on a certain day, sum the order costs on daily basis. 
Output customer's first name, total cost of their items, and the date.

SQL Query: 

Select first_name, total_order_cost, order_date
from (
Select first_name, SUM(total_order_cost) AS total_order_cost, order_date,
DENSE_RANK() OVER (ORDER BY SUM(total_order_cost) DESC) AS order_rank
From customers c
JOIN orders o
ON c.id = o.id
where order_date <  '2019-05-01' AND order_date > 2019-02-01
Group by c.id, order_date
) AS ordrnk
where order_rank = 1


Marketing Campaign Success

Quest: You have a table of in-app purchases by user. 
Users that make their first in-app purchase are placed in a marketing campaign where they see call-to-actions for more in-app purchases. 
Find the number of users that made additional in-app purchases due to the success of the marketing campaign.
The marketing campaign doesn't start until one day after the initial in-app purchase so users that only made one or multiple purchases on the first day do not count, 
nor do we count users that over time purchase only the products they purchased on the first day. 

SQL Query: 
SELECT COUNT(DISTINCT user_id) AS total_users
FROM (
SELECT user_id, created_at,
DENSE_Rank() OVER (PARTITION BY user_id ORDER BY created_at) AS rnk1,
DENSE_RANK() OVER (PARTITION BY user_id, product_id ORDER BY created_at) AS rnk2
FROM marketing_campaign
) t1
WHERE rnk1 > 1 AND rnk2 = 1 


Monthly Percentage Difference

Quest: Given a table of purchases by date, calculate the month-over-month percentage change in revenue. 
The output should include the year-month date (YYYY-MM) and percentage change, rounded to the 2nd decimal point, 
and sorted from the beginning of the year to the end of the year.
The percentage change column will be populated from the 2nd month forward and can be calculated as 
((this month's revenue - last month's revenue) / last month's revenue)*100.


SQL Quesry:
SELECT DATE_FORMAT (created_at, '%Y-%m') AS YM,
ROUND((SUM(value) - LAG(SUM(value)) OVER()) / LAG(SUM(value)) OVER() * 100, 2) AS
revenue_perc_diff
FROM sf_transactions
GROUP BY YM
ORDER BY YM


Users by Average Session Time

Quest: Calculate each user's average session time. A session is defined as the time difference between a page_load and page_exit. 
For simplicity, assume a user has only 1 session per day and if there are multiple of the same events on that day,
consider only the latest page_load and earliest page_exit. Output the user_id and their average session time.

SQL Query: 

WITH session_time AS (
SELECT user_id, DATE(timestamp) AS session_date,
MAX(CASE WHEN action = 'page_load' THEN timestamp ELSE NULL END) AS page_load_time,
MIN(CASE WHEN action = 'page_exit' THEN timestamp ELSE NULL END) AS page_exit_time
FROM facebook_web_log
GROUP BY user_id, session_date
),

session_time_a AS(
SELECT user_id,
session_time,
TIME_TO_SEC(TIMEDIFF(page_exit_time - page_load_time)) AS total_session_time
FROM session_time
WHERE TIMEDIFF(page_exit_time, page_load_time) IS NOT NULL
)

SELECT user_id, AVG(total_session_time) AS avg_session_time
FROM session_time_a
GROUP BY user_id

